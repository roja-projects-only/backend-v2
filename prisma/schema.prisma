// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
}

enum Location {
  BANAI
  DOUBE_L
  JOVIL_3
  LOWER_LOOB
  PINATUBO
  PLASTIKAN
  SAN_ISIDRO
  UPPER_LOOB
  URBAN
  WALK_IN
  ZUNIGA
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}

enum PaymentStatus {
  UNPAID      // Credit sale, no payment yet
  PARTIAL     // Partially paid
  PAID        // Fully paid
  OVERDUE     // Past due date
  COLLECTION  // In collection process
}

enum PaymentMethod {
  CASH  // Only cash payments supported
}

enum PaymentType {
  CASH    // Immediate payment
  CREDIT  // Deferred payment
}

enum CollectionStatus {
  ACTIVE      // Good standing
  OVERDUE     // Past due, needs reminder
  SUSPENDED   // Credit suspended
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String    // bcrypt hashed
  role          UserRole  @default(STAFF)
  active        Boolean   @default(true)
  
  // Relations
  sales         Sale[]
  customers     Customer[]
  auditLogs     AuditLog[]
  sessions      Session[]
  settingsUpdates Setting[]
  payments      Payment[]
  paymentTransactions PaymentTransaction[]
  reminderNotes ReminderNote[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([username])
}

model Customer {
  id              String    @id @default(cuid())
  name            String
  location        Location
  phone           String?
  customUnitPrice Float?    // Optional custom price per gallon (overrides global setting)
  notes           String?
  active          Boolean   @default(true)
  creditLimit     Float?    @default(1000) // Default â‚±1000 credit limit
  outstandingBalance Float  @default(0)    // Calculated field, updated on payment changes
  lastPaymentDate DateTime?
  collectionStatus CollectionStatus @default(ACTIVE)
  
  // Relations
  sales           Sale[]
  payments        Payment[]
  reminderNotes   ReminderNote[]
  createdBy       User      @relation(fields: [createdById], references: [id])
  createdById     String
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([name])
  @@index([location])
  @@index([createdById])
  @@index([collectionStatus])
  @@index([outstandingBalance])
}

model Sale {
  id          String    @id @default(cuid())
  quantity    Float
  unitPrice   Float
  total       Float
  date        DateTime
  notes       String?
  paymentType PaymentType @default(CASH)
  
  // Relations
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  payment     Payment?  // One-to-one relationship
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([customerId, date(sort: Asc)], name: "unique_customer_date")
  @@index([customerId])
  @@index([userId])
  @@index([date])
  @@index([paymentType])
}

model Setting {
  id        String    @id @default(cuid())
  key       String    @unique
  value     String
  type      String    @default("string") // string, number, boolean, json
  
  // Relations
  updatedBy User      @relation(fields: [updatedById], references: [id])
  updatedById String
  
  updatedAt DateTime  @updatedAt
  
  @@index([key])
}

model Session {
  id           String    @id @default(cuid())
  token        String    @unique
  refreshToken String    @unique
  expiresAt    DateTime
  
  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime  @default(now())
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model AuditLog {
  id          String      @id @default(cuid())
  action      AuditAction
  entity      String      // "User", "Customer", "Sale", "Setting"
  entityId    String
  changes     Json?       // Before/after state
  ipAddress   String?
  userAgent   String?
  
  // Relations
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  
  timestamp   DateTime    @default(now())
  
  @@index([userId])
  @@index([entity, entityId])
  @@index([timestamp])
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float         // Total amount owed
  status        PaymentStatus @default(UNPAID)
  paidAmount    Float         @default(0) // Total paid so far (sum of transactions)
  dueDate       DateTime?     // When payment is expected
  notes         String?
  
  // Relations
  sale          Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId        String        @unique
  customer      Customer      @relation(fields: [customerId], references: [id])
  customerId    String
  recordedBy    User          @relation(fields: [recordedById], references: [id])
  recordedById  String
  
  // Payment transactions (for partial payment tracking)
  transactions  PaymentTransaction[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([customerId])
  @@index([status])
  @@index([dueDate])
}

model PaymentTransaction {
  id            String        @id @default(cuid())
  amount        Float         // Amount paid in this transaction
  paymentMethod PaymentMethod @default(CASH)
  notes         String?       // Optional note for this specific transaction
  
  // Relations
  payment       Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId     String
  recordedBy    User          @relation(fields: [recordedById], references: [id])
  recordedById  String
  
  createdAt     DateTime      @default(now())
  
  @@index([paymentId])
  @@index([createdAt])
}

model ReminderNote {
  id            String    @id @default(cuid())
  note          String
  reminderDate  DateTime  @default(now())
  
  // Relations
  customer      Customer  @relation(fields: [customerId], references: [id])
  customerId    String
  createdBy     User      @relation(fields: [createdById], references: [id])
  createdById   String
  
  createdAt     DateTime  @default(now())
  
  @@index([customerId])
  @@index([reminderDate])
}
